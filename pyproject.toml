[project]
name = 'sigllm'
description = 'LLMs for unsupervised time series anomaly detection'
authors = [{ name = 'MIT Data To AI Lab', email = 'dailabmit@gmail.com' }]
classifiers = [
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
]
keywords = ['sigllm', 'LLM4TS', 'timeseries', 'anomaly-detection']
dynamic = ['version']
license = { text = 'MIT license' }
requires-python = '>=3.9,<3.12'
readme = 'README.md'

dependencies = [
    "matplotlib>=3.6.3",
    "modelscope>=1.28.1",
    "orion-ml>=0.7.1",
    "tensorflow-gpu==2.6",
    "torch>=2.1.2",
]

[dependency-groups]
dev = ["jupyter>=1.1.1"]

[project.urls]
homepage = 'https://github.com/sintel-dev/sigllm/'

[project.entry-points.mlblocks]
pipelines = 'sigllm:MLBLOCKS_PIPELINES'
primitives = 'sigllm:MLBLOCKS_PRIMITIVES'

[build-system]
requires = ['setuptools', 'wheel']
build-backend = 'setuptools.build_meta'

[tool.setuptools]
include-package-data = true
license-files = ['LICENSE']

[tool.setuptools.packages.find]
include = ['sigllm', 'sigllm.*']
namespaces = false

[tool.setuptools.package-data]
'*' = ['*.*']

[tool.setuptools.exclude-package-data]
'*' = ['* __pycache__']

[tool.setuptools.dynamic]
version = { attr = 'sigllm.__version__' }

[tool.bumpversion]
current_version = "0.0.5.dev0"
parse = '(?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)(\.(?P<release>[a-z]+)(?P<candidate>\d+))?'
serialize = [
    '{major}.{minor}.{patch}.{release}{candidate}',
    '{major}.{minor}.{patch}',
]
search = '{current_version}'
replace = '{new_version}'
regex = false
ignore_missing_version = false
tag = true
sign_tags = false
tag_name = 'v{new_version}'
tag_message = 'Bump version: {current_version} → {new_version}'
allow_dirty = false
commit = true
message = 'Bump version: {current_version} → {new_version}'
commit_args = ''

[tool.bumpversion.parts.release]
first_value = 'dev'
optional_value = 'release'
values = ['dev', 'release']

[[tool.bumpversion.files]]
filename = "sigllm/__init__.py"
search = "__version__ = '{current_version}'"
replace = "__version__ = '{new_version}'"

[tool.pytest.ini_options]
addopts = "--ignore=pyproject.toml"

# linting
[tool.ruff]
preview = true
line-length = 99
indent-width = 4
src = ['sigllm']
exclude = [
    "docs",
    ".tox",
    ".git",
    "__pycache__",
    "*.ipynb",
    ".ipynb_checkpoints",
    "tasks.py",
]

[tool.ruff.lint]
select = [
    "F",    # Pyflakes
    "E",    # pycodestyle
    "W",    # pycodestyle
    "D",    # pydocstyle
    "I001", # isort
    "T201", # print statements
]
ignore = [
    # pydocstyle
    "D107",  # Missing docstring in __init__
    "D417",  # Missing argument descriptions in the docstring
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "PD901",
    "PD101",
]

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
preview = true
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
known-first-party = ['sigllm']
lines-between-types = 0

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "E402", "F403", "F405", "E501", "I001"]
"tests/**.py" = ["D"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 99
max-line-length = 99

[tool.coverage.report]
exclude_also = ["def __repr__", "def main", "if __name__ == .__main__.:"]
